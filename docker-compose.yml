version: '3.8'
name: gen_ai_rag_langchain

services:
  app:
    build: .
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=True
      - LOG_LEVEL=INFO
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - WORKERS=1
    env_file:
      - .env
    volumes:
      - ./src:/app/src:ro
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - gen-ai-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes
    networks:
      - gen-ai-network

  docs:
    image: python:3.11-slim
    ports:
      - "8080:8080"
    volumes:
      - .:/app:ro
    working_dir: /app
    command: >
      sh -c "pip install mkdocs mkdocs-material mkdocstrings[python] &&
             mkdocs serve --dev-addr 0.0.0.0:8080"
    restart: unless-stopped
    networks:
      - gen-ai-network

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=gen_ai_rag
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - gen-ai-network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/ssl:/etc/ssl/certs:ro
    depends_on:
      - gen-ai-rag-langchain
    networks:
      - gen-ai-network

volumes:
  redis_data:
  postgres_data:

networks:
  gen-ai-network:
    driver: bridge
